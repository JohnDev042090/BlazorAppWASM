@page "/fileuploadmain"
@using System.Linq
@using System.IO
@using System.Net;
@*@using Microsoft.AspNetCore.Hosting*@
@using System.Net.Http.Headers
@using BlazorAppWSAM.Shared.Models
@using Microsoft.Extensions.Logging
@using Microsoft.AspNetCore.Components.Forms
@inject HttpClient Http
@inject ILogger<FileUpload2> Logger
@*@inject IWebHostEnvironment env*@
@inject IConfiguration config


<h1>Upload Files</h1>

<p>
    <label>
        Upload up to @maxAllowedFiles files:
        <InputFile OnChange="@OnInputFileChange" class="form-control form-control-sm" accept=".jpg,.png"  />
    </label>
</p>

<p>
    <label>
       @* Upload:*@
       @* <InputFile @ref="inputFile" OnChange="@ShowPreview" />*@
    </label>
    <img src="@imgPath" />
</p>


@if (files.Count > 0)
{
    <div class="card">
        <div class="card-body">
            <ul>
                @foreach (var file in files)
                {
                    <li>
                        File: @file.Name
                        <br>
                        @if (FileUpload(uploadResults, file.Name, Logger, out var result))
                            {
                                <span>
                                    Stored File Name: @result.StoredFileName
                                </span>
                            }
                            else
                            {
                                <span>
                                    There was an error uploading the file
                                    (Error: @result.ErrorCode).
                                </span>
                            }
                    </li>
                }
            </ul>
        </div>
    </div>
}

@code {
    private string imgPath;
    private string baseAdd;

    private InputFile? inputFile;
    private ElementReference previewImageElem;
    private MultipartFormDataContent multipartFormDataContent;

    private List<File> files = new();
    private List<UploadResult> uploadResults = new();
    private int maxAllowedFiles = 3;
    private bool shouldRender;

    protected override bool ShouldRender() => shouldRender;
    protected override void OnInitialized()
    {
        baseAdd = config.GetValue<string>("BaseAddress");
        //imgPath = Path.Combine(env.ContentRootPath, "ImageUploads", "ymf10hhw.kbt.jpeg");
    }

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        shouldRender = false;
        long maxFileSize = 1024 * 15;
        var upload = false;

        using var content = new MultipartFormDataContent();

        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            if (uploadResults.SingleOrDefault(
                f => f.FileName == file.Name) is null)
            {
                try
                {
                    files.Add(new() { Name = file.Name });

                    var fileContent = 
                        new StreamContent(file.OpenReadStream(maxFileSize));

                    fileContent.Headers.ContentType = 
                        new MediaTypeHeaderValue(file.ContentType);

                    content.Add(
                        content: fileContent,
                        name: "\"files\"",
                        fileName: file.Name);

                    multipartFormDataContent = content;

                    upload = true;
                }
                catch (Exception ex)
                {
                    Logger.LogInformation(
                        "{FileName} not uploaded (Err: 6): {Message}", 
                        file.Name, ex.Message);

                    uploadResults.Add(
                        new()
                        {
                            FileName = file.Name, 
                            ErrorCode = 6, 
                            Uploaded = false
                        });
                }
            }
        }

        if (upload)
        {
            try
            {
                Http.BaseAddress = new Uri("https://localhost:7193");
                var response = await Http.PostAsync("api/filesave/postfile", multipartFormDataContent);
                var newUploadResults = await response.Content
                    .ReadFromJsonAsync<IList<UploadResult>>();

                if (newUploadResults is not null)
                {
                    uploadResults = uploadResults.Concat(newUploadResults).ToList();
                }
            }
            catch (Exception ex)
            {
                throw;
            }
            
        }

        shouldRender = true;
    }

    private static bool FileUpload(IList<UploadResult> uploadResults,
        string? fileName, ILogger<FileUpload2> logger, out UploadResult result)
    {
        result = uploadResults.SingleOrDefault(f => f.FileName == fileName) ?? new();

        if (!result.Uploaded)
        {
            logger.LogInformation("{FileName} not uploaded (Err: 5)", fileName);
            result.ErrorCode = 5;
        }

        return result.Uploaded;
    }

    private class File
    {
        public string? Name { get; set; }
    }
}